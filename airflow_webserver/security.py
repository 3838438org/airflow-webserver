# -*- coding: utf-8 -*-
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from flask import g
from flask_appbuilder.security.sqla import models as sqla_models
from airflow_webserver import appbuilder

sm = appbuilder.sm

###########################################################################
#                               VIEW MENUS
###########################################################################
viewer_vms = [
    'Airflow',
    'DagModelView',
    'Browse',
    'Manage',
    'DAG Runs',
    'DagRunModelView',
    'Task Instances',
    'TaskInstanceModelView',
    'SLA Misses',
    'SlaMissModelView',
    'Jobs',
    'JobModelView',
    'Logs',
    'LogModelView',
    'Docs',
    'Documentation',
    'Github',
    'About',
    'Version',
    'VersionView',
]

user_vms = viewer_vms

op_vms = [
    'Admin',
    'Configurations',
    'ConfigurationView',
    'Connections',
    'ConnectionModelView',
    'Pools',
    'PoolModelView',
    'Variables',
    'VariableModelView',
    'XComs',
    'XComModelView',
]

# # admin vms are generated by default
# admin_vms = [
#     'ResetPasswordView',
#     'ResetMyPasswordView',
#     'UserInfoEditView',
#     'UserDBModelView',
#     'List Users',
#     'Security',
#     'RoleModelView',
#     'List Roles',
#     'UserStatsChartView',
#     'User\'s Statistics',
#     'PermissionModelView',
#     'Base Permissions',
#     'ViewMenuModelView',
#     'Views/Menus',
#     'PermissionViewModelView',
#     'Views/Menus',
# ]

###########################################################################
#                               PERMISSIONS
###########################################################################

viewer_perms = [
    'menu_access',
    'can_index',
    'can_list',
    'can_show',
    'can_chart',
    'can_dag_stats',
    'can_dag_details',
    'can_task_stats',
    'can_code',
    'can_log',
    'can_tries',
    'can_graph',
    'can_tree',
    'can_task',
    'can_task_instances',
    'can_xcom',
    'can_gantt',
    'can_landing_times',
    'can_duration',
    'can_blocked',
    'can_rendered',
    'can_pickle_info'
    'can_version',
]

user_perms = [
    'this form post',
    'this form get',
    'can_dagrun_clear',
    'can_run',
    'can_dagrun',
    'can_trigger',
    'can_add',
    'can_edit',
    'can_delete',
    'can_paused',
    'can_refresh',
    'can_success',
    'muldelete',
    'set_failed',
    'set_running', 
    'set_success',
    'clear',
]

op_perms = [
    'can_conf',
    'can_varimport',
]

# # admin perms are generated by default
# admin_perm = [
# ]

###########################################################################
#                     DEFAULT ROLE CONFIGURATIONS
###########################################################################

VIEWER_ROLE = 'Viewer'
USER_ROLE = 'User'
OP_ROLE = 'Op'

ROLE_CONFIGS = {
    VIEWER_ROLE: {
        'perm': viewer_perms,
        'vms' : viewer_vms,
    },
    USER_ROLE: {
        'perm': viewer_perms + user_perms,
        'vms' : viewer_vms + user_vms,
    },
    OP_ROLE: {
        'perm': viewer_perms + user_perms + op_perms,
        'vms' : viewer_vms + user_vms + op_vms,
    },
}

def init_role(role_name, role_config):
    session = sm.get_session()
    pvms = session.query(sqla_models.PermissionView).all()
    pvms = [p for p in pvms if p.permission and p.view_menu]
    role = sm.add_role(role_name)
    valid_perms = role_config['perm']
    valid_vms = role_config['vms']
    role_pvms = []
    for pvm in pvms:
        if pvm.view_menu.name in valid_vms and pvm.permission.name in valid_perms:
            role_pvms.append(pvm)
    role_pvms = list(set(role_pvms))
    role.permissions = role_pvms
    session.merge(role)
    session.commit()

def init_roles():
    for name, config in ROLE_CONFIGS.items():
        init_role(name, config)

def is_view_only(user):
    user_roles = user.roles
    return len(user_roles) == 1 and user_roles[0].name == VIEWER_ROLE
